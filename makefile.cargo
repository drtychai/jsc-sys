# Libc toolchain
OS  ?= $(shell uname)
CC  := $(shell which clang)
CXX := $(shell which clang++)

N_JOBS ?= $(shell nproc)

BUILD_DIR  ?= ${OUT_DIR}/build
WEBKIT_SRC ?= ${JSC_SRC}

ifeq (${JSC_SRC},)
WEBKIT_SRC := ${CARGO_MANIFEST_DIR}/WebKit
JSC_PATCH  := ${CARGO_MANIFEST_DIR}/cov.patch
endif

ifeq (${OS},Darwin)
JSC_H := ${BUILD_DIR}/JavaScriptCore/PrivateHeaders/JavaScriptCore.h
endif

ifeq (${OS},Linux)
JSC_H := ${BUILD_DIR}/JavaScriptCore/PrivateHeaders/JavaScriptCore/JavaSciptCore.h
endif

# Determine current patch state of our target engine
NEEDS_PATCHED ?= $(shell git -C ${WEBKIT_SRC} apply --check ${JSC_PATCH} 2>&1)

###############################################################################
#                                                                             #
#                             Cmake Build Args                                #
#                                                                             #
###############################################################################
CXX_FLAGS = "-Wall -Werror -Wunused-but-set-variable"

# Debug build flavor of JavaScriptCore
CMAKE_ARGS := "-DPORT=JSCOnly"
CMAKE_ARGS += " -DCMAKE_BUILD_TYPE=Debug"
CMAKE_ARGS += " -DCMAKE_C_COMPILER=${CC}"
CMAKE_ARGS += " -DCMAKE_CXX_COMPILER=${CXX}"
CMAKE_ARGS += " -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
CMAKE_ARGS += " -DCMAKE_CXX_FLAGS='-fsanitize-coverage=trace-pc-guard'"

# Build statically using libglib
CMAKE_ARGS += " -DCMAKE_SKIP_RPATH=ON"
CMAKE_ARGS += " -DENABLE_SAMPLING_PROFILER=OFF"
CMAKE_ARGS += " -DUSE_LD_GOLD=OFF"
CMAKE_ARGS += " -DUSE_SYSTEMD=OFF" # -DENABLE_SAMPLING_PROFILER=OFF"

CMAKE_ARGS += " -DENABLE_STATIC_JSC=ON"
CMAKE_ARGS += " -DENABLE_FTL_JIT=ON"
CMAKE_ARGS += " -DENABLE_TOOLS=OFF"

# Omit superfluous test code and build proper (i.e., non-shallow) archives
CMAKE_ARGS += " -DUSE_CAPSTONE=OFF"
CMAKE_ARGS += " -DUSE_SYSTEM_MALLOC=OFF"
CMAKE_ARGS += " -DUSE_THIN_ARCHIVES=OFF"
CMAKE_ARGS += " -DDEVELOPER_MODE=OFF"
CMAKE_ARGS += " -DSHOW_BINDINGS_GENERATION_PROGRESS=1"

###############################################################################

all: build

build: cov 
	@mkdir -p ${BUILD_DIR} && cd ${BUILD_DIR}
	@
	@cmake $(shell echo "$(CXX_FLAGS) -GNinja $(CMAKE_ARGS)") -S${WEBKIT_SRC} -B${BUILD_DIR}
	@ninja -C ${BUILD_DIR}
	@
	@#Copy over JavaScriptCore.h from our source directory for FFI generation
	@cp ${WEBKIT_SRC}/Source/JavaScriptCore/API/JavaScriptCore.h ${JSC_H}

cov:
	@# Check if our working target source has already been patch; if so leave it alone
	@if [[ -e "${NEEDS_PATCHED}" ]];then git -C ${WEBKIT_SRC} apply ${JSC_PATCH};fi

clean: 
	@make -C .${WEBKIT_SRC} clean && git -C ${WEBKIT_SRC} checkout .
	@cargo clean

.PHONY: all cov build clean
