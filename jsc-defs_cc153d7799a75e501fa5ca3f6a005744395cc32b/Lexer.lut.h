// Automatically generated from JavaScriptCore/parser/Keywords.table using JavaScriptCore/create_hash_table. DO NOT EDIT!

#include "Lookup.h"

namespace JSC {

static const struct CompactHashIndex mainTableIndex[134] = {
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 41, -1 },
    { 38, -1 },
    { 31, -1 },
    { 14, -1 },
    { 0, -1 },
    { -1, -1 },
    { 16, -1 },
    { -1, -1 },
    { 12, -1 },
    { 15, -1 },
    { -1, -1 },
    { 21, -1 },
    { -1, -1 },
    { 44, -1 },
    { 40, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 32, -1 },
    { -1, -1 },
    { 8, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 25, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 43, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 10, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 35, -1 },
    { 36, -1 },
    { 24, -1 },
    { -1, -1 },
    { 27, -1 },
    { -1, -1 },
    { 20, -1 },
    { -1, -1 },
    { 11, 130 },
    { -1, -1 },
    { 4, 132 },
    { -1, -1 },
    { 13, -1 },
    { -1, -1 },
    { 33, -1 },
    { 30, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 1, 128 },
    { 42, -1 },
    { 18, -1 },
    { -1, -1 },
    { 29, -1 },
    { 3, 129 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 6, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 28, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 23, -1 },
    { -1, -1 },
    { 45, -1 },
    { -1, -1 },
    { -1, -1 },
    { 39, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 5, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 17, -1 },
    { 26, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 7, 131 },
    { -1, -1 },
    { -1, -1 },
    { 2, -1 },
    { 9, -1 },
    { 19, -1 },
    { 22, -1 },
    { 34, 133 },
    { 37, -1 },
};

static const struct HashTableValue mainTableValues[46] = {
   { "null", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(NULLTOKEN), (intptr_t)(0) } },
   { "true", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(TRUETOKEN), (intptr_t)(0) } },
   { "false", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(FALSETOKEN), (intptr_t)(0) } },
   { "await", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(AWAIT), (intptr_t)(0) } },
   { "break", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(BREAK), (intptr_t)(0) } },
   { "case", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(CASE), (intptr_t)(0) } },
   { "catch", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(CATCH), (intptr_t)(0) } },
   { "class", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(CLASSTOKEN), (intptr_t)(0) } },
   { "const", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(CONSTTOKEN), (intptr_t)(0) } },
   { "default", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(DEFAULT), (intptr_t)(0) } },
   { "extends", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(EXTENDS), (intptr_t)(0) } },
   { "finally", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(FINALLY), (intptr_t)(0) } },
   { "for", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(FOR), (intptr_t)(0) } },
   { "instanceof", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(INSTANCEOF), (intptr_t)(0) } },
   { "new", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(NEW), (intptr_t)(0) } },
   { "var", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(VAR), (intptr_t)(0) } },
   { "let", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(LET), (intptr_t)(0) } },
   { "continue", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(CONTINUE), (intptr_t)(0) } },
   { "function", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(FUNCTION), (intptr_t)(0) } },
   { "return", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(RETURN), (intptr_t)(0) } },
   { "void", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(VOIDTOKEN), (intptr_t)(0) } },
   { "delete", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(DELETETOKEN), (intptr_t)(0) } },
   { "if", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(IF), (intptr_t)(0) } },
   { "this", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(THISTOKEN), (intptr_t)(0) } },
   { "do", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(DO), (intptr_t)(0) } },
   { "while", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(WHILE), (intptr_t)(0) } },
   { "else", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(ELSE), (intptr_t)(0) } },
   { "in", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(INTOKEN), (intptr_t)(0) } },
   { "super", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(SUPER), (intptr_t)(0) } },
   { "switch", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(SWITCH), (intptr_t)(0) } },
   { "throw", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(THROW), (intptr_t)(0) } },
   { "try", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(TRY), (intptr_t)(0) } },
   { "typeof", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(TYPEOF), (intptr_t)(0) } },
   { "with", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(WITH), (intptr_t)(0) } },
   { "debugger", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(DEBUGGER), (intptr_t)(0) } },
   { "yield", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(YIELD), (intptr_t)(0) } },
   { "enum", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(RESERVED), (intptr_t)(0) } },
   { "export", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(EXPORT_), (intptr_t)(0) } },
   { "import", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(IMPORT), (intptr_t)(0) } },
   { "implements", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(RESERVED_IF_STRICT), (intptr_t)(0) } },
   { "interface", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(RESERVED_IF_STRICT), (intptr_t)(0) } },
   { "package", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(RESERVED_IF_STRICT), (intptr_t)(0) } },
   { "private", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(RESERVED_IF_STRICT), (intptr_t)(0) } },
   { "protected", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(RESERVED_IF_STRICT), (intptr_t)(0) } },
   { "public", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(RESERVED_IF_STRICT), (intptr_t)(0) } },
   { "static", static_cast<unsigned>(PropertyAttribute::None), NoIntrinsic, { (intptr_t)(RESERVED_IF_STRICT), (intptr_t)(0) } },
};

static const struct HashTable mainTable =
    { 46, 127, false, nullptr, mainTableValues, mainTableIndex };

} // namespace JSC
